# vim: set filetype=make syntax=sh ts=8 sw=8 sts=0 noexpandtab :
#
# OVERRIDE Configuration Functions

REMOTE_TRACKING_COMPONENTS ?=
REMOTE_TRACKING ?=

[==- 'colors' ========================================================
bold   = $(shell tput bold    || tput md)
normal = $(shell tput sgr0    || tput me)
black  = $(shell tput setaf 0 || tput AF 0)
red    = $(shell tput setaf 1 || tput AF 1)
green  = $(shell tput setaf 2 || tput AF 2)
yellow = $(shell tput setaf 3 || tput AF 3)
blue   = $(shell tput setaf 4 || tput AF 4)
magenta= $(shell tput setaf 5 || tput AF 5)
white  = $(shell tput setaf 7 || tput AF 7)

# ============
# git commands
# ============
#
# List all remotes
#   git remote
#
# List current local repo branch name
#   git rev-parse --abbrev-ref HEAD
#
# List remote branch
#   git branch -r --list marmarek/master
#
# List tracking remote for local branch
#   git config branch.test.remote
#   (marmarek)
#
# List tracking branch for local branch
#   git config branch.test.merge | sed -e 's/^refs\/heads\///'
#   (release2)
#
# Fetch all
#   git fetch --all
#
# Track remote branch
#   git branch -u marmarek/master master
#
# Track remote branch -- Will use current branch
#   git branch -u marmarek/master
[==- 'git-command' =============================================================
git-command = \
	$(eval component := $(strip $(1))) \
	$(eval command := $(2)) \
	$(shell pushd $(SRC_DIR)/$(component) > /dev/null; $(command); popd > /dev/null)

[==- 'git-current-branch' ======================================================
git-current-branch = \
	$(call git-command, $(1), git rev-parse --abbrev-ref HEAD)

[==- 'git-add-remote' ==========================================================
git-add-remote = \
	$(eval local_repo    = $(strip $(1))) \
	$(eval local_branch  = $(strip $(2))) \
	$(eval remote_repo   = $(strip $(3))) \
	$(eval remote_branch = $(strip $(4))) \
	$(if $(filter $(remote_repo), $(call git-command, $(local_repo), git remote | grep $(remote_repo))),, \
	    $(eval prefix = $(GITHUB_PREFIX_$(remote_repo))) \
	    $(eval repo = $(shell pushd $(SRC_DIR)/$(local_repo) > /dev/null; git remote -v | sed -rn '1 s/^origin.*[/](.*)[ ].*$$/\1/p'; popd > /dev/null)) \
	    $(info --> Adding remote $(bold)$(blue)$(prefix)/$(green)$(repo)$(normal)...) \
	    $(call git-command, $(local_repo), git remote add -f --tags $(remote_repo) $(prefix)/$(repo) > /dev/null) \
	) 

[==- 'git-track-remote-branch' =================================================
git-track-remote-branch = \
	$(eval local_repo    = $(strip $(1))) \
	$(eval local_branch  = $(strip $(2))) \
	$(eval remote_repo   = $(strip $(3))) \
	$(eval remote_branch = $(strip $(4))) \
	$(call git-add-remote, $(local_repo), $(local_branch), $(remote_repo), $(remote_branch)) \
	$(eval remote = $(strip $(call git-command, $(local_repo), git config branch.$(local_branch).remote))) \
	$(eval branch = $(strip $(call git-command, $(local_repo), git config branch.$(local_branch).merge | sed -e 's/^refs\/heads\///'))) \
	$(if $(filter $(remote_repo)/$(remote_branch), $(remote)/$(branch)),, \
	     $(info --> Branch $(bold)$(blue)$(local_repo)/$(magenta)$(local_branch)$(normal) set up to track $(bold)$(blue)$(remote_repo)/$(green)$(remote_branch)$(normal)) \
	     $(call git-command, $(local_repo), git branch -u $(remote_repo)/$(remote_branch) $(local_branch) > /dev/null) \
	 )

[==- 'get-uniq' ================================================================
# Return unique values (removes duplicates preserving order)
get-uniq = \
	$(if $1,$(firstword $1) $(call get-uniq,$(filter-out $(firstword $1),$1)))

[==- 'get-local-branch' ========================================================
# Returns current local branch from the first non-empty string from the
# following values:
get-local-branch = \
	$(or $(OVERRIDE_BRANCH_$(strip $(subst -,_,$(1)))), \
	     $(DEFAULT_BRANCH_$(strip $(subst -,_,$(1)))), \
	     master)

[==- 'get-default-remote-branch' ===============================================
# Returns default remote branch from the first non-empty string from the
# following values:
get-default-remote-branch = \
	$(or $(DEFAULT_BRANCH_$(strip $(subst -,_,$(1)))), \
	     $(BRANCH_$(strip $(subst -,_,$(1)))), \
	     master)

[==- 'get-remote-repo' =========================================================
get-remote-repo = \
	$(or $(strip $(foreach _remote_components, $(filter REMOTE_COMPONENTS_%, $(.VARIABLES)), \
	      $(if $(filter $(1),$(shell echo $($(_remote_components)))),$(subst REMOTE_COMPONENTS_,,$(_remote_components))) \
	      )), \
	      $(strip $(REMOTE_TRACKING_DEFAULT)) \
	)

#[==- 'get-git-url' =============================================================
# Returns git URL based on ???
#GIT_PREFIX := nrgaway/qubes-
#GIT_BASEURL := git@github.com:
#GITHUB_PREFIX = git@github.com:nrgaway/qubes-
# GIT_URL_mgmt_salt := $(GITHUB_PREFIX)mgmt-salt.git
#get-git-url = \
#	$(GITHUB_PREFIX)$(1).git

[==- 'update-remote-tracking' ==================================================
# Updates `REMOTE-TRACKING` var for python `repo` application.
update-remote-tracking = \
	$(eval local_repo       = $(strip $(1))) \
	$(eval local_branch     = $(OVERRIDE_BRANCH_$(strip $(subst -,_,$(1))))) \
	$(eval remote_repo      = $(call get-remote-repo, $(1))) \
	$(eval remote_branch    = $(DEFAULT_BRANCH_$(strip $(subst -,_,$(1))))) \
	$(eval REMOTE_TRACKING += $(local_repo):$(local_branch):$(remote_repo):$(remote_branch))

[==- 'update-branch-override' ==================================================
# Sets corect upstream default tracking branch as well as set proper branch
# to use locally, either the default, or override if provided.
update-branch-override = \
	$(eval _component = $(strip $(1))) \
	$(eval DEFAULT_BRANCH_$(subst -,_,$(_component)) := $(call get-default-remote-branch, $(strip $(subst -,_,$(_component))))) \
	$(eval OVERRIDE_BRANCH_$(subst -,_,$(_component)) := $(call get-local-branch, $(strip $(subst -,_,$(_component))))) \
	$(eval BRANCH_$(subst -,_,$(_component)) := $(call get-local-branch, $(strip $(subst -,_,$(_component))))) 

[==- 'update-branch-defaults-and-tracking' =====================================
# Make sure `BUILDER_PLUGINS` are tracked even if thye do not get added as a
# `COMPONENT`

#	$(info REMOTE_TRACKING_COMPONENTS: $(REMOTE_TRACKING_COMPONENTS)) \
#	$(info REMOTE_TRACKING_IGNORE: $(REMOTE_TRACKING_IGNORE)) \
#	$(info COMPONENTS: $(COMPONENTS)) \
#	$(info BUILDER_PLUGINS: $(BUILDER_PLUGINS)) \
#	$(info REMOTE_TRACKING_COMPONENTS: $(REMOTE_TRACKING_COMPONENTS)) \
#	$(error TEST EXIT2) \

update-branch-defaults-and-tracking = \
	$(eval REMOTE_TRACKING_COMPONENTS := \
	    $(call get-uniq, $(filter-out $(REMOTE_TRACKING_IGNORE) $(COMPONENTS), $(REMOTE_TRACKING_COMPONENTS) $(BUILDER_PLUGINS)))) \
	$(foreach _component, $(call get-uniq, $(1)), \
	    $(call update-branch-override, $(_component)) \
	    $(call update-remote-tracking, $(_component)) \
	) 


about::
	@echo "functions.conf"
